<!DOCTYPE HTML>
<html>

<head>
  <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
  <meta content="utf-8" http-equiv="encoding">
  <title>Graph2d </title>

  <style type="text/css">
    body, html {
      font-family: sans-serif;
    }
  </style>
  <script src="../node_modules/vis/dist/vis.js"> </script>
  <link   href="../node_modules/vis/dist/vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css" />



</head>
<body>
<h2>Graph2d | ejs</h2>
<div style="width:700px; font-size:14px; text-align: justify;">
  This example shows the most basic functionality of the vis.js Graph2d module. An array or a vis.Dataset can be used as input.
  In the following examples we'll explore the options Graph2d offest for customization. This example uses all default settings.
  There are 10 predefined styles that will be cycled through automatically when you add different groups. Alternatively you can
  create your own styling.
  <br /><br />
  Graph2d is built upon the framework of the newly refactored timeline. A lot of the timeline options will also apply to Graph2d.
  In these examples however, we will focus on what's new in Graph2d!
</div>
<br />
<h1>Employees</h1>

    <!-- EJS loop through employees returned from MongoDB -->
    <ul>
      <% var itData = iotData %>
      <% iotData.forEach(employee => { %>
      <li><%= `Name: ${employee.id}, Age: ${employee.temp}` %></li>
      <% }); %>

      
      
</ul>

<div id="visualization"></div>
<script type="text/javascript">

  var container = document.getElementById('visualization');
  var groups = [];

  var itData = [];
  itData = <%- JSON.stringify(iotData) %>;
  itData.forEach(datapt => {
    groups.push({x : datapt.time,  y : datapt.temp })
  }
  
  );
  
  var dataset = new vis.DataSet(groups);
  
  var graph2d = new vis.Graph2d(container, dataset);
</script>
</body>


</html>